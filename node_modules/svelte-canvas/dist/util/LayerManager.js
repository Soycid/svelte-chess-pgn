class LayerManager {
    currentLayerId;
    setups;
    renderers;
    dispatchers;
    needsSetup;
    needsResize;
    needsRedraw;
    context;
    width;
    height;
    autoclear;
    pixelRatio;
    renderLoop;
    layerObserver;
    layerRef;
    layerSequence;
    renderingLayerId;
    activeLayerId;
    activeLayerDispatcher;
    constructor() {
        this.register = this.register.bind(this);
        this.unregister = this.unregister.bind(this);
        this.redraw = this.redraw.bind(this);
        this.resize = this.resize.bind(this);
        this.getRenderingLayerId = this.getRenderingLayerId.bind(this);
        this.currentLayerId = 1;
        this.setups = new Map();
        this.renderers = new Map();
        this.dispatchers = new Map();
        this.needsSetup = false;
        this.needsResize = true;
        this.needsRedraw = true;
        this.renderingLayerId = 0;
        this.activeLayerId = 0;
        this.layerSequence = [];
    }
    redraw() {
        this.needsRedraw = true;
    }
    resize() {
        this.needsResize = true;
        this.needsRedraw = true;
    }
    register({ setup, render, dispatcher }) {
        if (setup) {
            this.setups.set(this.currentLayerId, setup);
            this.needsSetup = true;
        }
        this.renderers.set(this.currentLayerId, render);
        this.dispatchers.set(this.currentLayerId, dispatcher);
        this.needsRedraw = true;
        return this.currentLayerId++;
    }
    unregister(layerId) {
        this.renderers.delete(layerId);
        this.dispatchers.delete(layerId);
        this.needsRedraw = true;
    }
    setup(context, layerRef) {
        this.context = context;
        this.layerRef = layerRef;
        this.observeLayerSequence();
        this.startRenderLoop();
    }
    observeLayerSequence() {
        this.layerObserver = new MutationObserver(this.getLayerSequence.bind(this));
        this.layerObserver.observe(this.layerRef, { childList: true });
        this.getLayerSequence();
    }
    getLayerSequence() {
        const layers = [...this.layerRef.children];
        this.layerSequence = layers.map((layer) => +(layer.dataset.layerId ?? -1));
        this.redraw();
    }
    startRenderLoop() {
        this.render();
        this.renderLoop = requestAnimationFrame(() => this.startRenderLoop());
    }
    render() {
        const context = this.context;
        const width = this.width;
        const height = this.height;
        const pixelRatio = this.pixelRatio;
        if (this.needsResize) {
            context.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
            this.needsResize = false;
        }
        if (this.needsSetup) {
            for (const [layerId, setup] of this.setups) {
                setup({ context, width, height });
                this.setups.delete(layerId);
            }
            this.needsSetup = false;
        }
        if (this.needsRedraw) {
            if (this.autoclear) {
                context.clearRect(0, 0, width, height);
            }
            for (const layerId of this.layerSequence) {
                this.renderingLayerId = layerId;
                this.renderers.get(layerId)?.({ context, width, height });
            }
            this.needsRedraw = false;
        }
    }
    setActiveLayer(layer, e) {
        if (this.activeLayerId === layer)
            return;
        if (e instanceof MouseEvent) {
            this.dispatchLayerEvent(new PointerEvent('pointerleave', e));
            this.dispatchLayerEvent(new MouseEvent('mouseleave', e));
        }
        this.activeLayerId = layer;
        this.activeLayerDispatcher = this.dispatchers.get(layer);
        if (e instanceof MouseEvent) {
            this.dispatchLayerEvent(new PointerEvent('pointerenter', e));
            this.dispatchLayerEvent(new MouseEvent('mouseenter', e));
        }
    }
    dispatchLayerEvent(e) {
        if (!this.activeLayerDispatcher)
            return;
        if (window.TouchEvent && e instanceof TouchEvent) {
            const { left, top } = e.target.getBoundingClientRect();
            const { clientX, clientY } = e.changedTouches[0];
            const detail = {
                x: clientX - left,
                y: clientY - top,
                originalEvent: e
            };
            this.activeLayerDispatcher(e.type, detail);
        }
        else if (e instanceof MouseEvent) {
            const detail = {
                x: e.offsetX,
                y: e.offsetY,
                originalEvent: e
            };
            this.activeLayerDispatcher(e.type, detail);
        }
    }
    getRenderingLayerId() {
        return this.renderingLayerId;
    }
    destroy() {
        if (typeof window === 'undefined')
            return;
        this.layerObserver.disconnect();
        cancelAnimationFrame(this.renderLoop);
    }
}
export default LayerManager;
