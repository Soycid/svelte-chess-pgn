import { idToRgb, rgbToId } from './color';
const EXCLUDED_GETTERS = ['drawImage', 'setTransform'];
const EXCLUDED_SETTERS = [
    'filter',
    'shadowBlur',
    'globalCompositeOperation',
    'globalAlpha'
];
const COLOR_OVERRIDES = [
    'drawImage',
    'fill',
    'fillRect',
    'fillText',
    'stroke',
    'strokeRect',
    'strokeText'
];
const createContextProxy = (context) => {
    let renderingLayerId;
    const canvas = document.createElement('canvas');
    const proxyContext = canvas.getContext('2d', {
        willReadFrequently: true
    });
    const resizeCanvas = () => {
        const { a: pixelRatio } = context.getTransform();
        canvas.width = context.canvas.width / pixelRatio;
        canvas.height = context.canvas.height / pixelRatio;
    };
    const canvasSizeObserver = new MutationObserver(resizeCanvas);
    canvasSizeObserver.observe(context.canvas, {
        attributeFilter: ['width', 'height']
    });
    resizeCanvas();
    return new Proxy(context, {
        get(target, property) {
            if (property === '_getLayerIdAtPixel') {
                return (x, y) => {
                    const pixel = proxyContext.getImageData(x, y, 1, 1).data;
                    return rgbToId(pixel[0], pixel[1], pixel[2]);
                };
            }
            const val = target[property];
            if (typeof val !== 'function')
                return val;
            return function (...args) {
                if (property === 'setTransform') {
                    resizeCanvas();
                }
                if (COLOR_OVERRIDES.includes(property)) {
                    const layerColor = idToRgb(renderingLayerId());
                    proxyContext.fillStyle = layerColor;
                    proxyContext.strokeStyle = layerColor;
                }
                if (property === 'drawImage') {
                    proxyContext.fillRect(...args.slice(1));
                }
                if (!EXCLUDED_GETTERS.includes(property)) {
                    Reflect.apply(val, proxyContext, args);
                }
                return Reflect.apply(val, target, args);
            };
        },
        set(target, property, newValue) {
            if (property === '_renderingLayerId') {
                renderingLayerId = newValue;
                return true;
            }
            target[property] = newValue;
            if (!EXCLUDED_SETTERS.includes(property)) {
                proxyContext[property] = newValue;
            }
            return true;
        }
    });
};
export { createContextProxy };
