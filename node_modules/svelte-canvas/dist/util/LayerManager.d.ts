import type { Render } from '../components/render';
import type { LayerEventDispatcher } from '../components/layerEvent';
declare class LayerManager {
    currentLayerId: number;
    setups: Map<number, Render>;
    renderers: Map<number, Render>;
    dispatchers: Map<number, LayerEventDispatcher>;
    needsSetup: boolean;
    needsResize: boolean;
    needsRedraw: boolean;
    context?: CanvasRenderingContext2D;
    width?: number;
    height?: number;
    autoclear?: boolean;
    pixelRatio?: number;
    renderLoop?: number;
    layerObserver?: MutationObserver;
    layerRef?: HTMLElement;
    layerSequence: number[];
    renderingLayerId: number;
    activeLayerId: number;
    activeLayerDispatcher?: LayerEventDispatcher;
    constructor();
    redraw(): void;
    resize(): void;
    register({ setup, render, dispatcher }: {
        setup?: Render;
        render: Render;
        dispatcher: LayerEventDispatcher;
    }): number;
    unregister(layerId: number): void;
    setup(context: CanvasRenderingContext2D, layerRef: HTMLElement): void;
    observeLayerSequence(): void;
    getLayerSequence(): void;
    startRenderLoop(): void;
    render(): void;
    setActiveLayer(layer: number, e: MouseEvent | TouchEvent): void;
    dispatchLayerEvent(e: MouseEvent | TouchEvent): void;
    getRenderingLayerId(): number;
    destroy(): void;
}
export default LayerManager;
