import { SvelteComponentTyped } from "svelte";
import LayerManager from '../util/LayerManager';
export declare const KEY: unique symbol;
interface TypedContext {
    register: LayerManager['register'];
    unregister: LayerManager['unregister'];
    redraw: LayerManager['redraw'];
}
export declare const getTypedContext: () => TypedContext;
import { type ContextProxy } from '../util/contextProxy';
declare const __propDef: {
    props: {
        width?: number | undefined;
        height?: number | undefined;
        pixelRatio?: number | null | undefined;
        style?: string | undefined;
        autoclear?: boolean | undefined;
        layerEvents?: boolean | undefined;
        class?: string | undefined;
        redraw?: (() => void) | undefined;
        getCanvas?: (() => HTMLCanvasElement) | undefined;
        getContext?: (() => CanvasRenderingContext2D | ContextProxy | null) | undefined;
    };
    events: {
        focus: FocusEvent;
        blur: FocusEvent;
        fullscreenchange: Event;
        fullscreenerror: Event;
        scroll: Event;
        cut: ClipboardEvent;
        copy: ClipboardEvent;
        paste: ClipboardEvent;
        keydown: KeyboardEvent;
        keypress: KeyboardEvent;
        keyup: KeyboardEvent;
        auxclick: MouseEvent;
        click: MouseEvent;
        contextmenu: MouseEvent;
        dblclick: MouseEvent;
        mousedown: MouseEvent;
        mouseenter: MouseEvent;
        mouseleave: MouseEvent;
        mousemove: MouseEvent;
        mouseover: MouseEvent;
        mouseout: MouseEvent;
        mouseup: MouseEvent;
        select: Event;
        wheel: WheelEvent;
        drag: DragEvent;
        dragend: DragEvent;
        dragenter: DragEvent;
        dragstart: DragEvent;
        dragleave: DragEvent;
        dragover: DragEvent;
        drop: DragEvent;
        touchcancel: TouchEvent;
        touchend: TouchEvent;
        touchmove: TouchEvent;
        touchstart: TouchEvent;
        pointerover: PointerEvent;
        pointerenter: PointerEvent;
        pointerdown: PointerEvent;
        pointermove: PointerEvent;
        pointerup: PointerEvent;
        pointercancel: PointerEvent;
        pointerout: PointerEvent;
        pointerleave: PointerEvent;
        gotpointercapture: PointerEvent;
        lostpointercapture: PointerEvent;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export type CanvasProps = typeof __propDef.props;
export type CanvasEvents = typeof __propDef.events;
export type CanvasSlots = typeof __propDef.slots;
export default class Canvas extends SvelteComponentTyped<CanvasProps, CanvasEvents, CanvasSlots> {
}
export {};
